{"version":3,"sources":["libs/github.ts","components/Card.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["_fetch","url","fetch","then","response","json","getUser","user","concat","getRepo","repo","mock","name","avatar","description","Card","props","base","_useState","useState","_useState2","Object","slicedToArray","state","setState","useEffect","_props$data","objectSpread","data","Promise","all","avatar_url","newState","react_default","a","createElement","className","src","alt","href","target","rel","App","list","map","i","components_Card","key","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAGMA,EAAS,SAACC,GAAD,OACbC,MAAMD,GACHE,KAAK,SAACC,GAAD,OAAwBA,EAASC,UAE9BC,EAAU,SAACC,GAAD,OACrBP,EAAM,GAAAQ,OAPa,yBAOb,WAAAA,OAAkBD,KAEbE,EAAU,SACrBF,EACAG,GAFqB,OAGJV,EAAM,GAAAQ,OAZJ,yBAYI,WAAAA,OAAkBD,EAAlB,KAAAC,OAA0BE,KCH7CC,EAAkB,CACtBJ,KAAM,OACNG,KAAM,OACNE,KAAM,YACNC,OAAQ,iDACRC,YAAa,0BAyDAC,EAtDmB,SAACC,GACjC,IAAMC,EAAe,sBADsBC,EAEjBC,mBAASR,GAFQS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEpCK,EAFoCH,EAAA,GAE7BI,EAF6BJ,EAAA,GAqB3C,OAjBAK,oBAAU,WAAM,IAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAA,GACaL,EAAMY,MAAzBrB,EADMmB,EACNnB,KAAMG,EADAgB,EACAhB,KAEdmB,QAAQC,IAAI,CACVxB,EAAQC,GACRE,EAAQF,EAAMG,KAEbP,KAAK,SAAAyB,GAAI,MAAK,CACbrB,OACAG,OACAE,KAAMgB,EAAK,GAAGhB,KACdC,OAAQe,EAAK,GAAGG,WAChBjB,YAAac,EAAK,GAAGd,eAEtBX,KAAK,SAAC6B,GAAD,OAAyBR,EAASQ,MACzC,CAAChB,EAAMY,OAGRK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OACEE,IAAKd,EAAMV,OACXyB,IAAKf,EAAMhB,OAEb0B,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcb,EAAMb,MAClCuB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCb,EAAMX,QAGzDqB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAab,EAAMT,aAChCmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KACEI,KAAMtB,EAAOM,EAAMhB,KACnBiC,OAAO,SACPC,IAAI,sBACJL,UAAU,mBACVb,EAAMhB,KALR,cAMA0B,EAAAC,EAAAC,cAAA,KACEI,KAAI,GAAA/B,OAAKS,GAALT,OAAYe,EAAMhB,KAAlB,KAAAC,OAA0Be,EAAMb,MACpC8B,OAAO,SACPC,IAAI,sBACJL,UAAU,2BACVb,EAAMb,KALR,mBCzCKgC,EAfgB,SAAC1B,GAC9B,IAAM2B,EAAmB3B,EAAM2B,MAAQ,GAEvC,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,eACGQ,EAAKC,IAAK,SAAChB,EAAgBiB,GAAjB,OACTZ,EAAAC,EAAAC,cAACW,EAAD,CAAMlB,KAAMA,EAAMmB,IAAKF,wBCAbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,CAAKZ,KAAMf,IAAU4B,SAASC,eAAe,SDiIvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.db647dbb.chunk.js","sourcesContent":["\nconst base: string = 'https://api.github.com';\n\nconst _fetch = (url: string): Promise<any> => \n  fetch(url)\n    .then((response: Response) => response.json());\n\nexport const getUser = (user: string): Promise<any> => \n  _fetch(`${base}/users/${user}`);\n\nexport const getRepo = (\n  user: string,\n  repo: string\n): Promise<any> => _fetch(`${base}/repos/${user}/${repo}`);","import React, { \n  useState,\n  useEffect\n} from 'react';\nimport { \n  CardProps, \n  CardState \n} from '../libs/types';\nimport { getUser, getRepo } from '../libs/github';\n\nconst mock: CardState = {\n  user: 'user',\n  repo: 'repo',\n  name: 'Some User',\n  avatar: 'https://randomuser.me/api/portraits/lego/1.jpg',\n  description: 'Some description title'\n}\n\nconst Card: React.FC<CardProps> = (props) => {\n  const base: string = 'https://github.com/';\n  const [state, setState] = useState(mock);\n\n  useEffect(() => {\n    const { user, repo } = {...props.data};\n\n    Promise.all([\n      getUser(user),\n      getRepo(user, repo)\n    ])\n      .then(data => ({\n        user,\n        repo,\n        name: data[0].name,\n        avatar: data[0].avatar_url,\n        description: data[1].description\n      }))\n      .then((newState: CardState) => setState(newState));\n  }, [props.data]);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <article>\n          <img \n            src={state.avatar}\n            alt={state.user}\n          />\n          <section>\n            <h5 className=\"card-title\">{state.repo}</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">{state.name}</h6>\n          </section>\n        </article>\n        <p className=\"card-text\">{state.description}</p>\n        <div className=\"buttons\">\n          <a\n            href={base + state.user}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"btn btn-primary\"\n          >{state.user}'s profile</a>\n          <a\n            href={`${base}${state.user}/${state.repo}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"btn btn-outline-primary\"\n          >{state.repo} repository</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { AppData, CardData } from '../libs/types';\n\nconst App: React.FC<AppData> = (props) => {\n  const list: CardData[] = props.list || [];\n\n  return (\n    <div className=\"container\">\n      <h1>Moholers GitCards</h1>\n      <section>\n        {list.map( (data: CardData, i: number) => \n          <Card data={data} key={i} />\n        )}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport data from './data.json';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App list={data} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}